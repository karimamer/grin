upto m n =
  let cmp = int_gt m n
  case cmp of
    (True)  -> (Nil)
    (False) -> let box1 = (Int 1)
                   succ = int_add m box1
                   tail = upto succ n
               (Cons m tail)

sum l =
  case l of
    (Nil)       -> (Int 0)
    (Cons n ns) -> let s = sum ns
                   int_add n s

grinMain =
  let box1 = (Int 1)
      box2 = (Int 10)
      l = upto box1 box2
      s = sum l
  int_print s
