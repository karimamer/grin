{-
  Heap locations have way too general type sets.
  This is due to the fact that apply can produce
  many differenct node types.
  (All partial applications and return values of all functions).
  apply is called by ap, which is called by eval.
  This means that all pointers will have this overly general type information.
  So for example the second argument of foo could be CInt or any Pfoo node.
  As a consequence, since foo's return value is the return value of grinMain,
  all partial applications of foo will be completely live (this is not intended).

  Eval inlining + apply inlining should solve this issue.
-}

grinMain =
  a0 <- pure (CInt 5)
  a1 <- pure (CInt 5)
  a2 <- pure (CInt 5)
  p0 <- store a0
  p1 <- store a1
  p2 <- store a2

  foo3 <- pure (P3foo)
  pfoo3 <- store foo3

  foo3ap  <- pure (Fap pfoo3 p0)
  pfoo3ap <- store foo3ap
  foo2    <- eval pfoo3ap
  pfoo2   <- store foo2

  foo2ap  <- pure (Fap pfoo2 p1)
  pfoo2ap <- store foo2ap
  foo1    <- eval pfoo2ap
  pfoo1   <- store foo1

  foo1ap  <- pure (Fap pfoo1 p2)
  pfoo1ap <- store foo1ap
  fooRet  <- eval pfoo1ap

  pure fooRet


foo x0 y0 z0 =
  y0' <- eval y0
  pure y0'

-- apply always gets the function node in whnf
apply pf cur =
  case pf of
    (P3foo) ->
      n0 <- pure (P2foo cur)
      pure n0
    (P2foo v0) ->
      n1 <- pure (P1foo v0 cur)
      pure n1
    (P1foo v1 v2) ->
      n2 <- foo v1 v2 cur
      pure n2

ap f x =
  f' <- eval f
  apply f' x

eval p =
  v <- fetch p
  case v of
    (CInt n) -> pure v

    (P3foo)       -> pure v
    (P2foo v3)    -> pure v
    (P1foo v4 v5) -> pure v

    (Ffoo b0 b1 b2) ->
      w0 <- foo b0 b1 b2
      update p w0
      pure w0
    (Fapply g y) ->
      w1 <- apply g y
      update p w1
      pure w1
    (Fap h z) ->
      w2 <- ap h z
      update p w2
      pure w2
